{"ast":null,"code":"const clientId = 'a27c9c83f31246d38d0acee7bb05cda9'; // Replace with your Client ID\nconst redirectUri = 'http://172.25.176.1:3000'; // Use your network IP address\nconst scopes = ['playlist-modify-public', 'playlist-modify-private', 'user-read-private', 'user-read-email'];\nlet accessToken;\nlet tokenExpiration;\nconst Spotify = {\n  getAccessToken() {\n    // Check if we already have an access token\n    if (accessToken && Date.now() < tokenExpiration) {\n      return accessToken; // Return the token if it's still valid\n    }\n\n    // Check for access token in URL\n    const urlParams = new URLSearchParams(window.location.hash);\n    const token = urlParams.get('access_token');\n    const expiresIn = urlParams.get('expires_in');\n    if (token) {\n      accessToken = token;\n      tokenExpiration = Date.now() + expiresIn * 1000; // Set expiration time\n      window.setTimeout(() => accessToken = '', expiresIn * 1000); // Clear token after expiration\n      window.history.pushState({}, document.title, window.location.pathname); // Clear URL parameters\n      return accessToken;\n    } else {\n      // If no token, redirect to Spotify authorization\n      const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes.join(' '))}`;\n      window.location = authUrl; // Redirect to Spotify login\n    }\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","scopes","accessToken","tokenExpiration","Spotify","getAccessToken","Date","now","urlParams","URLSearchParams","window","location","hash","token","get","expiresIn","setTimeout","history","pushState","document","title","pathname","authUrl","encodeURIComponent","join"],"sources":["C:/Users/eppsk/Desktop/Coding Folders/Learning Folders/Current/CodeCademy Full Stack Path/Full Stack Path Projects/React/Jamming/jammming/Frontend/src/Spotify.js"],"sourcesContent":["const clientId = 'a27c9c83f31246d38d0acee7bb05cda9'; // Replace with your Client ID\r\nconst redirectUri = 'http://172.25.176.1:3000'; // Use your network IP address\r\nconst scopes = [\r\n    'playlist-modify-public',\r\n    'playlist-modify-private',\r\n    'user-read-private',\r\n    'user-read-email',\r\n];\r\n\r\nlet accessToken;\r\nlet tokenExpiration;\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        // Check if we already have an access token\r\n        if (accessToken && Date.now() < tokenExpiration) {\r\n            return accessToken; // Return the token if it's still valid\r\n        }\r\n\r\n        // Check for access token in URL\r\n        const urlParams = new URLSearchParams(window.location.hash);\r\n        const token = urlParams.get('access_token');\r\n        const expiresIn = urlParams.get('expires_in');\r\n\r\n        if (token) {\r\n            accessToken = token;\r\n            tokenExpiration = Date.now() + expiresIn * 1000; // Set expiration time\r\n            window.setTimeout(() => (accessToken = ''), expiresIn * 1000); // Clear token after expiration\r\n            window.history.pushState({}, document.title, window.location.pathname); // Clear URL parameters\r\n            return accessToken;\r\n        } else {\r\n            // If no token, redirect to Spotify authorization\r\n            const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes.join(' '))}`;\r\n            window.location = authUrl; // Redirect to Spotify login\r\n        }\r\n    },\r\n};\r\n\r\nexport default Spotify;\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,kCAAkC,CAAC,CAAC;AACrD,MAAMC,WAAW,GAAG,0BAA0B,CAAC,CAAC;AAChD,MAAMC,MAAM,GAAG,CACX,wBAAwB,EACxB,yBAAyB,EACzB,mBAAmB,EACnB,iBAAiB,CACpB;AAED,IAAIC,WAAW;AACf,IAAIC,eAAe;AAEnB,MAAMC,OAAO,GAAG;EACZC,cAAcA,CAAA,EAAG;IACb;IACA,IAAIH,WAAW,IAAII,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,eAAe,EAAE;MAC7C,OAAOD,WAAW,CAAC,CAAC;IACxB;;IAEA;IACA,MAAMM,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;IAC3D,MAAMC,KAAK,GAAGL,SAAS,CAACM,GAAG,CAAC,cAAc,CAAC;IAC3C,MAAMC,SAAS,GAAGP,SAAS,CAACM,GAAG,CAAC,YAAY,CAAC;IAE7C,IAAID,KAAK,EAAE;MACPX,WAAW,GAAGW,KAAK;MACnBV,eAAe,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGQ,SAAS,GAAG,IAAI,CAAC,CAAC;MACjDL,MAAM,CAACM,UAAU,CAAC,MAAOd,WAAW,GAAG,EAAG,EAAEa,SAAS,GAAG,IAAI,CAAC,CAAC,CAAC;MAC/DL,MAAM,CAACO,OAAO,CAACC,SAAS,CAAC,CAAC,CAAC,EAAEC,QAAQ,CAACC,KAAK,EAAEV,MAAM,CAACC,QAAQ,CAACU,QAAQ,CAAC,CAAC,CAAC;MACxE,OAAOnB,WAAW;IACtB,CAAC,MAAM;MACH;MACA,MAAMoB,OAAO,GAAG,oDAAoDvB,QAAQ,qCAAqCwB,kBAAkB,CAACvB,WAAW,CAAC,UAAUuB,kBAAkB,CAACtB,MAAM,CAACuB,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;MAChMd,MAAM,CAACC,QAAQ,GAAGW,OAAO,CAAC,CAAC;IAC/B;EACJ;AACJ,CAAC;AAED,eAAelB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}