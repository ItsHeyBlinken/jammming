{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eppsk\\\\Desktop\\\\Coding Folders\\\\Learning Folders\\\\Current\\\\CodeCademy Full Stack Path\\\\Full Stack Path Projects\\\\React\\\\Jamming\\\\jammming\\\\Frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\n// import SearchResults from './components/SearchResults';\nimport Playlist from './components/Playlist';\nimport Tracklist from './components/Tracklist';\nimport Spotify from './Spotify'; // Import the Spotify module\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tracks = [{\n  id: 1,\n  name: \"Song One\",\n  artist: \"Artist A\",\n  album: \"Album X\"\n}, {\n  id: 2,\n  name: \"Song Two\",\n  artist: \"Artist B\",\n  album: \"Album Y\"\n}, {\n  id: 3,\n  name: \"Song Three\",\n  artist: \"Artist C\",\n  album: \"Album Z\"\n}];\nconst mockPlaylistTracks = [{\n  id: 1,\n  name: \"Playlist Song One\",\n  artist: \"Artist A\",\n  album: \"Album X\",\n  uri: \"spotify:track:1\"\n}, {\n  id: 2,\n  name: \"Playlist Song Two\",\n  artist: \"Artist B\",\n  album: \"Album Y\",\n  uri: \"spotify:track:2\"\n}];\nconst App = () => {\n  _s();\n  const [searchResults, setSearchResults] = useState(tracks);\n  const [playlistName, setPlaylistName] = useState(\"My Playlist\");\n  const [playlistTracks, setPlaylistTracks] = useState(mockPlaylistTracks);\n  useEffect(() => {\n    const token = Spotify.getAccessToken(); // Get the access token\n    console.log(\"Access Token:\", token); // For testing, log the token\n  }, []);\n  const handleSearch = searchTerm => {\n    // Logic to fetch search results from Spotify API\n    // For now, you can just set it to the hard-coded tracks\n    setSearchResults(tracks); // This will update the state with the tracks\n  };\n  const handleAddTrackToPlaylist = track => {\n    // Check if the track is already in the playlist\n    const isTrackInPlaylist = playlistTracks.some(playlistTrack => playlistTrack.id === track.id);\n    if (!isTrackInPlaylist) {\n      // If the track is not in the playlist, add it\n      setPlaylistTracks(prevTracks => [...prevTracks, track]);\n    }\n  };\n  const handleRemoveTrackFromPlaylist = track => {\n    // Filter out the track that needs to be removed\n    const updatedPlaylistTracks = playlistTracks.filter(playlistTrack => playlistTrack.id !== track.id);\n    setPlaylistTracks(updatedPlaylistTracks); // Update the state with the new playlist\n  };\n  const handleChangePlaylistName = newName => {\n    setPlaylistName(newName); // This will update the playlist name\n  };\n  const handleSavePlaylist = () => {\n    // Create an array of URIs from the playlist tracks\n    const trackURIs = playlistTracks.map(track => track.uri); // Assuming each track has a uri property\n\n    // Mock saving process (you can replace this with actual API call later)\n    console.log(\"Saving playlist with the following URIs:\", trackURIs);\n\n    // Reset the playlist after saving\n    setPlaylistTracks([]);\n    setPlaylistName(\"My Playlist\"); // Reset to default name or any other logic you want\n  };\n  const handleLogin = () => {\n    window.location.href = 'http://localhost:3001/login'; // Redirect to your backend login route\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Jammming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleLogin,\n      children: \"Login with Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      onSearch: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Tracklist, {\n      tracks: searchResults,\n      onAdd: handleAddTrackToPlaylist,\n      onRemove: handleRemoveTrackFromPlaylist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n      name: playlistName,\n      tracks: playlistTracks,\n      onRemove: handleRemoveTrackFromPlaylist,\n      onChangeName: handleChangePlaylistName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSavePlaylist,\n      children: \"Save To Spotify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"v7QpEDvB8UtE/TALr4IFleZ9y6E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SearchBar","Playlist","Tracklist","Spotify","jsxDEV","_jsxDEV","tracks","id","name","artist","album","mockPlaylistTracks","uri","App","_s","searchResults","setSearchResults","playlistName","setPlaylistName","playlistTracks","setPlaylistTracks","token","getAccessToken","console","log","handleSearch","searchTerm","handleAddTrackToPlaylist","track","isTrackInPlaylist","some","playlistTrack","prevTracks","handleRemoveTrackFromPlaylist","updatedPlaylistTracks","filter","handleChangePlaylistName","newName","handleSavePlaylist","trackURIs","map","handleLogin","window","location","href","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onSearch","onAdd","onRemove","onChangeName","_c","$RefreshReg$"],"sources":["C:/Users/eppsk/Desktop/Coding Folders/Learning Folders/Current/CodeCademy Full Stack Path/Full Stack Path Projects/React/Jamming/jammming/Frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\n// import SearchResults from './components/SearchResults';\nimport Playlist from './components/Playlist';\nimport Tracklist from './components/Tracklist';\nimport Spotify from './Spotify'; // Import the Spotify module\n\nconst tracks = [\n    { id: 1, name: \"Song One\", artist: \"Artist A\", album: \"Album X\" },\n    { id: 2, name: \"Song Two\", artist: \"Artist B\", album: \"Album Y\" },\n    { id: 3, name: \"Song Three\", artist: \"Artist C\", album: \"Album Z\" },\n];\n\nconst mockPlaylistTracks = [\n    { id: 1, name: \"Playlist Song One\", artist: \"Artist A\", album: \"Album X\", uri: \"spotify:track:1\" },\n    { id: 2, name: \"Playlist Song Two\", artist: \"Artist B\", album: \"Album Y\", uri: \"spotify:track:2\" },\n];\n\nconst App = () => {\n    const [searchResults, setSearchResults] = useState(tracks);\n    const [playlistName, setPlaylistName] = useState(\"My Playlist\");\n    const [playlistTracks, setPlaylistTracks] = useState(mockPlaylistTracks);\n\n    useEffect(() => {\n        const token = Spotify.getAccessToken(); // Get the access token\n        console.log(\"Access Token:\", token); // For testing, log the token\n    }, []);\n\n    const handleSearch = (searchTerm) => {\n        // Logic to fetch search results from Spotify API\n        // For now, you can just set it to the hard-coded tracks\n        setSearchResults(tracks); // This will update the state with the tracks\n    };\n\n\n    const handleAddTrackToPlaylist = (track) => {\n        // Check if the track is already in the playlist\n        const isTrackInPlaylist = playlistTracks.some(playlistTrack => playlistTrack.id === track.id);\n        \n        if (!isTrackInPlaylist) {\n            // If the track is not in the playlist, add it\n            setPlaylistTracks(prevTracks => [...prevTracks, track]);\n        }\n    };\n\n    const handleRemoveTrackFromPlaylist = (track) => {\n        // Filter out the track that needs to be removed\n        const updatedPlaylistTracks = playlistTracks.filter(playlistTrack => playlistTrack.id !== track.id);\n        setPlaylistTracks(updatedPlaylistTracks); // Update the state with the new playlist\n    };\n\n    const handleChangePlaylistName = (newName) => {\n        setPlaylistName(newName); // This will update the playlist name\n    };\n\n    const handleSavePlaylist = () => {\n        // Create an array of URIs from the playlist tracks\n        const trackURIs = playlistTracks.map(track => track.uri); // Assuming each track has a uri property\n\n        // Mock saving process (you can replace this with actual API call later)\n        console.log(\"Saving playlist with the following URIs:\", trackURIs);\n\n        // Reset the playlist after saving\n        setPlaylistTracks([]);\n        setPlaylistName(\"My Playlist\"); // Reset to default name or any other logic you want\n    };\n\n    const handleLogin = () => {\n        window.location.href = 'http://localhost:3001/login'; // Redirect to your backend login route\n    };\n\n    return (\n        <div>\n            <h1>Jammming</h1>\n            <button onClick={handleLogin}>Login with Spotify</button>\n            <SearchBar onSearch={handleSearch} />\n            <Tracklist tracks={searchResults} onAdd={handleAddTrackToPlaylist} onRemove={handleRemoveTrackFromPlaylist} />\n            <Playlist \n                name={playlistName} \n                tracks={playlistTracks} \n                onRemove={handleRemoveTrackFromPlaylist} \n                onChangeName={handleChangePlaylistName}\n            />\n            <button onClick={handleSavePlaylist}>Save To Spotify</button>\n        </div>\n    );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}